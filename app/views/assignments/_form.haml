= render 's3_uploader'  

.small-12.columns
  = simple_form_for(@assignment) do |f|
    .panel
      .small-12.large-4.columns.right.panel.callout.radius
        .small-12
          %label.checkbox{ :for => "visible" }
            = f.label :visible, "Visible to students"
            %i.fi-eye
            = f.check_box :visible
            .form_label Can #{term_for :students} see this #{term_for :assignment} in their dashboard?  

        .small-12
          %label.checkbox{ :for => "required" }
            = f.label :required
            %i.fi-star
            = f.check_box :required
            .form_label Are ALL #{term_for :students} expected to complete this #{term_for :assignment} to pass the course?


        - if current_course.accepts_submissions?
          .small-12
            %label.checkbox{ :for => "accepts_submissions" }
              = f.label :accepts_submissions #{term_for :assignment} Submissions
              %i.fi-paperclip
              = f.check_box :accepts_submissions
              .form_label Will you be using GradeCraft to accept submissions for this #{term_for :assignment}?

        .small-12
          %label.checkbox{ :for => "student_logged" }
            = f.label :student_logged
            %i.fi-pencil
            = f.check_box :student_logged
            .form_label Do students self-report their grade for this #{term_for :assignment}?

        .small-12
          %label.checkbox{ :for => "release_necessary" }
            = f.label :release_necessary
            %i.fi-unlock
            = f.check_box :release_necessary
            .form_label Do you want to release all grades at once? This is particularly useful for situations where extensive feedback is important.

        - if @assignment.assignment_type.present? && ! @assignment.assignment_type.notify_released?
          .small-12
            %label.checkbox{ :for => "notify_released" }
              = f.label :notify_released, "Notify by email?"
              %i.fi-mail
              .form_label Do you want to notify students by email when a grade is awarded? If grade release is necessary, this email will not be sent out until the grade is officially released.
        .small-12
          %label.checkbox{ :for => "include_in_timeline" }
            = f.label :include_in_timeline, "Timeline"
            %i.fi-layout
            = f.check_box :include_in_timeline
            .form_label Can #{term_for :students} see this #{term_for :assignment} in the course timeline? Note that #{term_for :assignments} without open or due dates will be excluded automatically.

        .small-12
          %label.checkbox{ :for => "include_in_predictor" }
            = f.label :include_in_predictor, "Predictor"
            %i.fi-checkbox
            = f.check_box :include_in_predictor
            .form_label Can #{term_for :students} see this #{term_for :assignment} in the grade predictor?

      .small-12.large-8.columns
        .small-12.large-8
          = f.label :assignment_type, "#{term_for :assignment} Type"
          = select_tag :assignment_type_id, options_from_collection_for_select(current_course.assignment_types, "id", "name", @assignment.try(:assignment_type_id))

      .small-12.large-8

        .small-12.large-8.columns
          = f.label :name
          = f.text_field :name

        .small-12.large-4.columns
          = f.label :point_total, "Total Points Possible"
          = f.text_field :point_total

      .small-12.large-8

        .small-12.large-4.columns
          = f.input :open_at, as: :string, :include_blank => true, :input_html => { :class => 'datetimepicker', :value => @assignment.try(:open_at) }

        .small-12.large-4.columns
          = f.input :due_at, as: :string, :include_blank => true, :input_html => { :class => 'datetimepicker', :value => @assignment.try(:due_at) }

        .small-12.large-4.columns
          = f.input :accepts_submissions_until, as: :string, :include_blank => true, :input_html => { :class => 'datetimepicker', :value => @assignment.try(:accepts_submissions_until) }, :label => "Accept until"

      .small-12.large-8.columns

        .small-12.large-8
          = f.label :grade_scope, "Do students do this individually or as a group?"
          = f.select :grade_scope, [["Individual"], ["Group"]]

        .small-12.large-8
          = f.label :mass_grade_type, "How should this assignment appear in Quick Grade?"
          = f.select :mass_grade_type, [[],["Checkbox"], ["Select List"], ["Radio Buttons"], ["Text"]]

        .small-12.large-8
          = f.label :points_predictor_display, "How should this assignment appear in the Grade Predictor?"
          = f.select :points_predictor_display, [[], ["Checkbox", "Fixed"], ["Select List"], ["Slider"], ]

      .small-12.large-4.columns
        
        = f.simple_fields_for :assignment_files, @assignment.assignment_files.new do |aff|
          = aff.input :filepath, :input_html => { :class => 's3_files' }, :as => :hidden        

      .clearfix

      .small-12.textarea
        = f.bootsy_area :description
        .form_label 
          %b Assignment Description: 
          %span This will be shown to students on their dashboard, and when they submit their assignment.

    .panel
      %h4.bold Grade Levels
      .small-12.columns
        .assignment-score-levels
          %p.hint Example: You could create three levels to produce a quick grading scheme for just this #{term_for :assignment} - Complete (5000 points), Finalist (7000 points), and Winner (10,000 points). These levels will then show in the quick grade, and when students are setting goals in the grade predictor.
          %script(id="assignment-score-level-template" type="text/x-template")
            %fieldset.assignment-score-level
              = f.simple_fields_for :assignment_score_levels, AssignmentScoreLevel.new, class: 'form-inline', child_index: 'child_index' do |slf|
                = render 'assignment_score_level_fields', f: slf
          - @assignment.assignment_score_levels.each do |assignment_score_level|
            %fieldset.assignment-score-level
              = f.simple_fields_for :assignment_score_levels, assignment_score_level, class: 'form-inline' do |slf|
                = render 'assignment_score_level_fields', f: slf
        = link_to 'Add a Level', '#', class: 'add-assignment-score-level button tiny radius'
      .clearfix

    .panel
      %h4.bold Timeline
        
      .small-12.large-4.columns
        = f.label :media, "Image/Video"
        = f.text_field :media

      .small-12.large-4.columns
        = f.label :thumbnail
        = f.text_field :thumbnail

      .small-12.large-4.columns
        = f.label :media_credit, "Media Credit"
        = f.text_field :media_credit

      .small-12.large-4.columns
        = f.label :media_caption, "Caption"
        = f.text_field :media_caption

      .clearfix  

    .right
      = f.button :submit, "#{@assignment.persisted? ? 'Update' : 'Create'} #{term_for :assignment}", :class => "button radius tiny"
      = link_to 'Cancel', assignments_path, :class => "button radius transparent tiny"
