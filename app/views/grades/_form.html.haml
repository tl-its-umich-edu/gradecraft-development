.small-12.right.medium-4.columns

/ - if @rubric.designed?
/   #rubric-grader(ng-app="gradecraft" ng-controller="GradeRubricCtrl" ng-init="init(#{@rubric[:id]}, #{@metrics}, #{@assignment[:id]}, #{params[:student_id]}, #{@course_badges.html_safe})")

/     .row
/       #rubric-heading.small-7.columns
/         %h3.text-right
/           Grade Assignment by Rubric
/           = link_to "(Edit)", design_assignment_rubric_path(@assignment)
/         %h4.text-right (click to select the level earned for each criterion)
/         %br

/       #points-overview-floating(ng-cloak ng-hide="angular.element('#points-overview').isOnscreen()")
/         %h4#points-legend
/           %span.points-assigned(ng-class="{'points-missing': pointsMissing(), 'points-satisfied': pointsSatisfied(), 'points-overage': pointsOverage()}") {{pointsGiven() | number:0}}
/           \/{{pointsPossible | number:0}} Points Allocated
/         %h4.notice(ng-hide="pointsSatisfied() || pointsMissing()") You have not yet allocated any points
/         %h4.notice(ng-show="pointsMissing()") {{pointsRemaining() | number:0}} point{{pointsRemaining() > 1 ? "s" : ""}} have not been assigned
/         %h4.notice(ng-show="pointsSatisfied()") You have allocated all possible points

/       .clear

/     #rubric-grader-splash.large-12.columns.text-center(ng-cloak)
/       Loading assignment...
/       %br
/       %br

/     %table#grade-rubric-table(ng-cloak)
/       %thead
/         %tr
/           %td.metric.heading
/             %label.larger
/               <strong>Criterion</strong>:&nbsp;Max&nbsp;points

/           %td.tier.heading(colspan="#{@rubric.max_tier_count}")
/             %label.larger
/               %strong Level:
/               Point value
/           %td.comments.heading(ng-show="tiersSelected().length > 0")
/             %label.larger
/               Comments

/       %tbody
/         %tr(ng-repeat="metric in metrics")
/           %td.metric
/             .metric-heading
/               .metric-name {{metric.name.replace(' ','&nbsp;')}}
/               .metric-points
/                 {{(metric.max_points || 0) | number:0}}&nbsp;Points
/             .metric-description {{metric.description}}

/           %td.tier(ng-repeat="tier in metric.tiers" ng-click="metric.gradeWithTier(tier)" ng-class="{selected: metric.isUsingTier(tier)}")
/             .tier-heading
/               .tier-name {{tier.name.replace(' ','&nbsp;')}}
/               .tier-points
/                 {{tier.points | number:0}}&nbsp;Points
/                 %input(class="tier-select" type='radio' name="metric_tier_{{metric.id}}" ng-checked="metric.isUsingTier(tier)")
/             .clear
/             %label.tier-description
/               {{tier.description}}
/             .row.badge-row
/               .tier-badge-image(ng-repeat="(tierBadgeId, tierBadge) in tier.badges")
/                 = image_tag "badge.png", width: "50px", height: "50px"
/               .clear
/           %td.filler(ng-show="metric.tiers.length < #{@rubric.max_tier_count}" colspan="{{#{@rubric.max_tier_count} - metric.tiers.length}}")
/           %td.comments
/             %textarea(ng-model="metric.comment")

/     %br
/     .row.text-center.points-given
/       .points-overview.bottom(ng-cloak)
/         %h4.points-legend
/           %span.points-assigned(ng-class="{'points-missing': pointsMissing(), 'points-satisfied': pointsSatisfied(), 'points-overage': pointsOverage()}") {{pointsGiven() | number:0}}
/           \/{{pointsPossible | number:0}} Points Allocated
/         %h4.notice(ng-hide="pointsSatisfied() || pointsMissing()") You have not yet allocated any points
/         %h4.notice(ng-show="pointsMissing()") {{pointsRemaining() | number:0}} point{{pointsRemaining() > 1 ? "s" : ""}} have not been assigned
/         %h4.notice(ng-show="pointsSatisfied()") You have allocated all possible points
/       .clear
/     .row.text-center
/       %button#submit-grade(ng-click="submitGrade()" ng-disabled="selectedTiers().length == 0") Submit Grade

/ - else

= simple_form_for @grade, url: assignment_grade_path(@assignment), method: :patch do |f|
  = hidden_field_tag :student_id, current_student.id
  .panel
    .small-12.large-4.columns
      = f.label :raw_score
      - if @assignment.assignment_type.has_levels?
        = f.select :raw_score, @score_levels.map { |l| [l.name,l.value] }, :include_blank => true
      - elsif @assignment.has_levels?
        = f.select :raw_score, @assignment_score_levels.map { |l| [l.name,l.value] }, :include_blank => true
      - else
        = f.text_field :raw_score, :default => @assignment.point_total, :label => "Score", :hint => "Total Assignment Points: #{ points @assignment.point_total }", data: {autonumeric: true, "m-dec" => "0"}
      = f.simple_fields_for :grade_files, @grade.grade_files.new do |gff|
        = gff.input :filepath, :input_html => { :class => 's3_files' }, :as => :hidden


    - if @assignment.release_necessary?
      .small-12.large-4.columns
        - if current_user_is_gsi?
          = f.input :status, as: :select, :collection => ["In Progress", "Graded"], :selected => @grade.status
          .form_label Is this grade ready to be reviewed?
        - else
          = f.input :status,  as: :select, :collection => ["In Progress", "Graded", "Released"], :selected => @grade.status, :include_blank => true
          .form_label Can the student see this grade?
    - elsif @grade.status.blank?
      = f.hidden_field :status, value: 'Graded'

    .small-12.large-4.columns
      = f.simple_fields_for :grade_files, @grade.grade_files.new do |gff|
        = gff.input :filename, :input_html => { :class => 's3_files' }, :as => :hidden
    .clearfix

    .small-12.columns
      = f.hidden_field :graded_by_id, :value => current_user.id
      = f.label :feedback
      = f.bootsy_area :feedback

    .clearfix

  .clearfix


  .right
    = submit_tag "#{@grade.persisted? && @grade.is_graded? ? 'Update' : 'Submit'} Grade", :class => "button tiny radius"
    = link_to 'Cancel', assignment_path(@assignment), :class => 'button tiny radius'
